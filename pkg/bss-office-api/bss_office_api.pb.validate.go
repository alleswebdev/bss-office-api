// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ozonmp/bss_office_api/v1/bss_office_api.proto

package bss_office_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Office with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Office) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return OfficeValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 100 {
		return OfficeValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	// no validation rules for Description

	return nil
}

// OfficeValidationError is the validation error returned by Office.Validate if
// the designated constraints aren't met.
type OfficeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfficeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfficeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfficeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfficeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfficeValidationError) ErrorName() string { return "OfficeValidationError" }

// Error satisfies the builtin error interface
func (e OfficeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOffice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfficeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfficeValidationError{}

// Validate checks the field values on DescribeOfficeV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeOfficeV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOfficeId() <= 0 {
		return DescribeOfficeV1RequestValidationError{
			field:  "OfficeId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeOfficeV1RequestValidationError is the validation error returned by
// DescribeOfficeV1Request.Validate if the designated constraints aren't met.
type DescribeOfficeV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeOfficeV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeOfficeV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeOfficeV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeOfficeV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeOfficeV1RequestValidationError) ErrorName() string {
	return "DescribeOfficeV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeOfficeV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeOfficeV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeOfficeV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeOfficeV1RequestValidationError{}

// Validate checks the field values on DescribeOfficeV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeOfficeV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeOfficeV1ResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeOfficeV1ResponseValidationError is the validation error returned by
// DescribeOfficeV1Response.Validate if the designated constraints aren't met.
type DescribeOfficeV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeOfficeV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeOfficeV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeOfficeV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeOfficeV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeOfficeV1ResponseValidationError) ErrorName() string {
	return "DescribeOfficeV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeOfficeV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeOfficeV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeOfficeV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeOfficeV1ResponseValidationError{}

// Validate checks the field values on CreateOfficeV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateOfficeV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 100 {
		return CreateOfficeV1RequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	// no validation rules for Description

	return nil
}

// CreateOfficeV1RequestValidationError is the validation error returned by
// CreateOfficeV1Request.Validate if the designated constraints aren't met.
type CreateOfficeV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfficeV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfficeV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfficeV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfficeV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfficeV1RequestValidationError) ErrorName() string {
	return "CreateOfficeV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfficeV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfficeV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfficeV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfficeV1RequestValidationError{}

// Validate checks the field values on CreateOfficeV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateOfficeV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOfficeId() <= 0 {
		return CreateOfficeV1ResponseValidationError{
			field:  "OfficeId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// CreateOfficeV1ResponseValidationError is the validation error returned by
// CreateOfficeV1Response.Validate if the designated constraints aren't met.
type CreateOfficeV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfficeV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfficeV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfficeV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfficeV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfficeV1ResponseValidationError) ErrorName() string {
	return "CreateOfficeV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfficeV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfficeV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfficeV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfficeV1ResponseValidationError{}

// Validate checks the field values on ListOfficesV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOfficesV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfficesV1ResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOfficesV1ResponseValidationError is the validation error returned by
// ListOfficesV1Response.Validate if the designated constraints aren't met.
type ListOfficesV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfficesV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfficesV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfficesV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfficesV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfficesV1ResponseValidationError) ErrorName() string {
	return "ListOfficesV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfficesV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfficesV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfficesV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfficesV1ResponseValidationError{}

// Validate checks the field values on RemoveOfficeV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveOfficeV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOfficeId() <= 0 {
		return RemoveOfficeV1RequestValidationError{
			field:  "OfficeId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveOfficeV1RequestValidationError is the validation error returned by
// RemoveOfficeV1Request.Validate if the designated constraints aren't met.
type RemoveOfficeV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOfficeV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOfficeV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOfficeV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOfficeV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOfficeV1RequestValidationError) ErrorName() string {
	return "RemoveOfficeV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOfficeV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOfficeV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOfficeV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOfficeV1RequestValidationError{}

// Validate checks the field values on RemoveOfficeV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveOfficeV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveOfficeV1ResponseValidationError is the validation error returned by
// RemoveOfficeV1Response.Validate if the designated constraints aren't met.
type RemoveOfficeV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOfficeV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOfficeV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOfficeV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOfficeV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOfficeV1ResponseValidationError) ErrorName() string {
	return "RemoveOfficeV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOfficeV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOfficeV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOfficeV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOfficeV1ResponseValidationError{}
